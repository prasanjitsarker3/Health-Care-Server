// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id String @id @default(uuid())
  email String @unique
  password String
  role UserRole 
  needPasswordChange Boolean @default(true)
  status UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  admin Admin ?
  doctor Doctor ?
  patient Patient ?

  @@map("users")
}

model Admin {
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String ?
  contactNumber String
  isDeleted Boolean @default(false) 
  createdAt DateTime @default(now())
  upadateAt DateTime @updatedAt
  user User @relation(fields: [email], references: [email])


  @@map("admins") 
}

model Doctor {
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String ?
  contactNumber String
  address String ?
  registrationNumber String
  experience Int @default(0)
  gender Genedr
  appointmentFree Int
  qualification String
  currentWorkingPlace String
  designaton String
  averageRating Float @default(4.00)
  isDeleted Boolean @default(false) 
  createdAt DateTime @default(now())
  upadateAt DateTime @updatedAt
  user User @relation(fields: [email], references: [email])

  @@map("doctors")
  
}

model Patient {
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String ?
  contactNumber String
  address String ?
  isDeleted Boolean @default(false) 
  createdAt DateTime @default(now())
  upadateAt DateTime @updatedAt
  user User @relation(fields: [email], references: [email])
 
 @@map("patients")
}



enum UserRole {
  SUPPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}
enum Genedr {
  MALE
  FEMALE
}